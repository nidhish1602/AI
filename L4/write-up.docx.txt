Name: Nidhish Lakhinana
USN: 1BM18CS059
DATE: 07-11-2020


LAB 4: Implement A* search algorithm using 8-puzzle.
Explanation: The puzzle consists of 8 tiles, one empty space and they’re moved to reach the goal state from start state. Start and Goal configurations (also called state) of the puzzle are provided. The puzzle can be solved by moving the tiles one by one in the single empty space and thus achieving the Goal configuration. The tiles in the initial(start) state can be swapped with empty space in a particular order and thus achieve the goal state.
Rules for solving the puzzle: Instead of moving the tiles in the empty space, we can visualize moving the empty space in place of the tile, basically swapping the tile with the empty space. The empty space can only move in four directions viz.,
1. Up
2. Down
3. Right or
4. Left
The empty space cannot move diagonally and can take only one step at a time (i.e. move the empty space one position at a time).


Using A* search algorithm: A* uses a combination of heuristic value (h-score: how far the goal node is) as well as the g-score (i.e. the number of nodes traversed from the start node to current node).
f-score = h-score + g-score
In our 8-Puzzle problem, we can define the h-score as the number of misplaced tiles by comparing the current state and the goal state or summation of the Manhattan distance between misplaced nodes.
g-score will remain as the number of nodes traversed from a start node to get to the current node.


How A* solves the 8-Puzzle problem:
We first move the empty space in all the possible directions in the start state and calculate the f-score for each state. This is called expanding the current state.
A state with the least f-score is selected and expanded again. This process continues until the goal state occurs as the current state. Basically, here we are providing the algorithm a measure to choose its actions. The algorithm chooses the best possible action and proceeds in that path.
This solves the issue of generating redundant child states, as the algorithm will expand the node with the least f-score.
  

















Implementation of algorithm:
Below are the functions used in the implementation of a* search.
1. To calculate Manhattan distance
def h(state, target):


2. A* search algorithm
def astar(src, target):  # a* algo


3. To find all possible moves of empty tile
def possible_moves(state, visited_states):


4. To move Up, Down, Left, Right 
def gen(state, direction, b):


5. To print the required states
def print_grid(src):